Resources:
  # Create a NoSQL database for storing the tweets and user information
  TweetDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      # Use a primary key that is a composite of the tweet ID and user ID
      # This allows you to store all the tweets for a given user in a single partition
      # and allows you to retrieve a tweet by its ID and user ID
      AttributeDefinitions:
        - AttributeName: tweet_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: tweet_id
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE
      # Use a global secondary index to allow you to retrieve tweets by user ID
      # and to allow you to retrieve the most recent tweets for a given user
      GlobalSecondaryIndexes:
        - IndexName: user_index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: tweet_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: hashtag_index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: tweet_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      # Use a provisioned capacity to handle the expected read and write requests
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  # Create a security group for the NoSQL database
  TweetDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # Use the same VPC as the web server instances
      VpcId: !Ref VPC
      # Allow incoming traffic from the web server instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      # Allow outgoing traffic to anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  # Modify the security group for the web server instances to allow outgoing traffic to the NoSQL database
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # (Modified from previous response)
      # Use the same VPC as the web server instances
      VpcId: !Ref VPC
      # Allow incoming HTTP traffic from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      # Allow outgoing traffic to the NoSQL database
      SecurityGroupEgress:
        - IpProtocol: tcp

          FromPort: 8000
          ToPort: 8000
          DestinationSecurityGroupId: !Ref TweetDatabaseSecurityGroup

  # Modify the security group for the web server instances to allow outgoing traffic to the NoSQL database
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # (Modified from previous response)
      # Use the same VPC as the web server instances
      VpcId: !Ref VPC
      # Allow incoming HTTP traffic from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      # Allow outgoing traffic to the NoSQL database
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          DestinationSecurityGroupId: !Ref TweetDatabaseSecurityGroup
